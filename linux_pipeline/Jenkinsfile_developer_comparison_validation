#!/usr/bin/env groovy

env.SLAVE_PIPELINE_NAME = "pipeline-developer-patch-runner"
env.SEND_EMAIL = true
env.BUILD_KERNEL_ARTIFACTS = true
env.KERNEL_ARTIFACTS_SMB_PATH = ""
env.PARAM_SEPARATOR_STYLE = 'font-size: 15px; font-weight: 600;'

properties ([
    overrideIndexTriggers(false),
    [$class: 'ParametersDefinitionProperty',
        parameterDefinitions: [
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "KERNEL BUILD CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'ChoiceParameterDefinition',
            name: 'KERNEL_GIT_URL',
            choices: """git://git.kernel.org/pub/scm/linux/kernel/git/next/linux-next.git\nhttps://git.kernel.org/pub/scm/linux/kernel/git/davem/net-next.git\nazure_kernel""",
            description: 'Kernel tree repo'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_GIT_BRANCH',
            defaultValue: 'master',
            description: 'Branch to be built'],
        [$class: 'StringParameterDefinition',
            name: 'KERNEL_PATCH',
            defaultValue: "",
            description: 'Valid examples: \n scp://my-scp-hostname:/home/my-username/patch.p1 \n scp://my-username@my-scp-hostname:/home/my-username/patch.p1 \n http://my-website.com/patch.p1 \n Use the space separator for multiple patches.'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'SKIP_UNPATCHED',
            description: 'Whether to skip unpatched run. No result comparison will be possible.'],
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "TEST CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'ChoiceParameterDefinition',
            choices: """westus2\naustraliaeast\naustraliasoutheast\nbrazilsouth\ncanadacentral
                        canadaeast\ncentralindia\ncentralus\neastasia\neastus\neastus2\nfrancecentral
                        japaneast\njapanwest\nkoreacentral\nkoreasouth\nnorthcentralus\nnortheurope
                        southcentralus\nsoutheastasia\nsouthindia\nuksouth\nukwest\nwestcentralus
                        westeurope\nwestindia\nwestus\nsepremium""",
            name: 'LISAV2_AZURE_REGION',
            description: 'Azure Region'],
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "AZURE BOOT TEST CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'BooleanParameterDefinition',
            defaultValue: true,
            name: 'RUN_AZURE_BOOT_TEST',
            description: 'Whether to run Azure Boot test'],
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "AZURE BOOT STRESS TEST CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_AZURE_BOOT_STRESS_TEST',
            description: 'Whether to run Azure Boot Stress test (100 iterations)'],
        [$class: 'ChoiceParameterDefinition',
            name: 'AZURE_BOOT_STRESS_VM_SIZE',
            choices: "Standard_A2\nStandard_E64_v3\nStandard_F72s_v2",
            description: 'Azure Boot Stress vm size'],
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "FUNCTIONAL TEST CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_AZURE_BVT_TESTS',
            description: 'Whether to run Azure basic validation tests'],
        [$class: 'BooleanParameterDefinition',
            defaultValue: false,
            name: 'RUN_HYPERV_BVT_TESTS',
            description: 'Whether to run HYPERV basic validation tests'],
        [$class: 'ParameterSeparatorDefinition',
            separatorStyle: "",
            sectionHeader: "AZURE PERFOMANCE TEST CONFIGURATION",
            sectionHeaderStyle: env.PARAM_SEPARATOR_STYLE],
        [$class: 'ChoiceParameterDefinition',
            choices: """NONE
                    STORAGE
                    NETWORK""",
            name: 'AZURE_PERF_TESTS',
            description: 'What Azure Performance tests to run. You can customize the test cases from the options below.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """4k
                    1024k""",
            name: 'AZURE_PERF_STORAGE_IO_SIZE',
            description: 'Azure Performance STORAGE IO SIZE.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """ALL
                    randread
                    randwrite
                    read
                    write""",
            name: 'AZURE_PERF_STORAGE_IO_MODE',
            description: 'Azure Performance STORAGE IO MODE.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """IPERF3_1CONNECTION
                    NTTTCP_TCP
                    NTTTCP_UDP""",
            name: 'AZURE_PERF_NETWORK_TEST_TYPE',
            description: 'Azure Performance Network testing type. NTTTCP_TCP and NTTTCP_UDP TBD.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """SYNTHETIC
                    SRIOV""",
            name: 'NET_IPERF3_TYPE',
            description: 'Azure Performance NETWORK IPERF3 1CONNECTION: SYNTHETIC or SRIOV type.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """ALL
                    32\n64\n128\n256\n512\n1024\n2048\n4096\n8192\n16384\n32768\n65536""",
            name: 'NET_IPERF3_BUFFER_LENGTH',
            description: 'Azure Performance NETWORK IPERF3 1CONNECTION BUFFER LENGTH.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """SYNTHETIC
                    SRIOV""",
            name: 'NTTTCP_TCP_TYPE',
            description: 'Azure Performance NETWORK NTTTCP TCP: SYNTHETIC or SRIOV type. TBD.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """ALL
                    1\n2\n4\n8\n16\n32\n64\n128\n256\n512\n1024\n2048\n4096\n6144\n8192\n10240""",
            name: 'NTTTCP_TCP_CONNECTIONS',
            description: 'Azure Performance NETWORK NTTTCP TCP number of connections. TBD.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """SYNTHETIC
                    SRIOV""",
            name: 'NTTTCP_UDP_TYPE',
            description: 'Azure Performance NETWORK NTTTCP UDP: SYNTHETIC or SRIOV type. TBD.'],
        [$class: 'ChoiceParameterDefinition',
            choices: """ALL
                    2\n4\n8\n16\n32\n64\n128\n256\n512\n1024""",
            name: 'NTTTCP_UDP_CONNECTIONS',
            description: 'Azure Performance NETWORK NTTTCP UDP number of connections. TBD.']
        ]
    ]
])


// ****************
// PIPELINE HELPERS
// ****************

def getCommonParams(patches, buildTag) {
    return [
        string(name: 'KERNEL_GIT_URL', value: params.KERNEL_GIT_URL),
        string(name: 'KERNEL_GIT_BRANCH', value: params.KERNEL_GIT_BRANCH),
        string(name: 'KERNEL_ARTIFACTS_SMB_PATH', value: env.KERNEL_ARTIFACTS_SMB_PATH),
        string(name: 'KERNEL_PATCH', value: patches),
        booleanParam(name: 'BUILD_KERNEL_ARTIFACTS', value: env.BUILD_KERNEL_ARTIFACTS.toBoolean()),
        string(name: 'LISAV2_AZURE_REGION', value: params.LISAV2_AZURE_REGION),
        booleanParam(name: 'RUN_AZURE_BOOT_TEST', value: params.RUN_AZURE_BOOT_TEST),
        booleanParam(name: 'RUN_AZURE_BOOT_STRESS_TEST', value: params.RUN_AZURE_BOOT_STRESS_TEST),
        string(name: 'AZURE_BOOT_STRESS_VM_SIZE', value: params.AZURE_BOOT_STRESS_VM_SIZE),
        booleanParam(name: 'RUN_AZURE_BVT_TESTS', value: params.RUN_AZURE_BVT_TESTS),
        booleanParam(name: 'RUN_HYPERV_BVT_TESTS', value: params.RUN_HYPERV_BVT_TESTS),
        string(name: 'AZURE_PERF_TESTS', value: params.AZURE_PERF_TESTS.trim()),
        string(name: 'AZURE_PERF_STORAGE_IO_SIZE', value: params.AZURE_PERF_STORAGE_IO_SIZE.trim()),
        string(name: 'AZURE_PERF_STORAGE_IO_MODE', value: params.AZURE_PERF_STORAGE_IO_MODE.trim()),
        string(name: 'AZURE_PERF_NETWORK_TEST_TYPE', value: params.AZURE_PERF_NETWORK_TEST_TYPE.trim()),
        string(name: 'NET_IPERF3_TYPE', value: params.NET_IPERF3_TYPE.trim()),
        string(name: 'NET_IPERF3_BUFFER_LENGTH', value: params.NET_IPERF3_BUFFER_LENGTH.trim()),
        string(name: 'NTTTCP_TCP_TYPE', value: params.NTTTCP_TCP_TYPE.trim()),
        string(name: 'NTTTCP_TCP_CONNECTIONS', value: params.NTTTCP_TCP_CONNECTIONS.trim()),
        string(name: 'NTTTCP_UDP_TYPE', value: params.NTTTCP_UDP_TYPE.trim()),
        string(name: 'NTTTCP_UDP_CONNECTIONS', value: params.NTTTCP_UDP_CONNECTIONS.trim()),
        string(name: 'CUSTOM_BUILD_TAG', value: "${buildTag}-${BUILD_NUMBER}")
    ]
}


// *************
// PIPELINE MAIN
// *************


node ("meta_slave") {
    def runs = [:]
    def patchedRun, unpachedRun;
    def patchedParams = getCommonParams(env.KERNEL_PATCH, "patched")

    stage ("test_kernels") {
            runs["kernel_patched"] = {
                patchedRun = build job: "${env.SLAVE_PIPELINE_NAME}/${env.BRANCH_NAME}",
                             parameters: patchedParams, propagate: false;
            }
            if (!params.SKIP_UNPATCHED) {
                def unpatchedParams = getCommonParams("", "unpatched")
                runs["kernel_unpatched"] = {
                    unpatchedRun = build job: "${env.SLAVE_PIPELINE_NAME}/${env.BRANCH_NAME}",
                                   parameters: unpatchedParams, propagate: false;
                }
            }
            parallel runs
    }

    stage ("compare_results") {
        checkout scm
        dir ('aggregate_results' + env.BUILD_NUMBER + env.BRANCH_NAME) {
            echo "Aggregate results"
            copyArtifacts(projectName: "${env.SLAVE_PIPELINE_NAME}/${env.BRANCH_NAME}", selector: specific("${patchedRun.number}"), target: "patched_run");
            sh '''
                #!/bin/bash
                set -xe
                output_file="${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/aggregate-junit.xml"
                cd "${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/patched_run/Report/"
                echo "<testsuites>" >> "${output_file}"
                for filename in AZURE_BOOT_TEST AZURE_BOOT_STRESS_TEST AZURE_BVT_TESTS HYPERV_BVT_TESTS; do
                    if [ -f "${filename}.xml" ]; then
                        sed -i "s/LISAv2Test/LISAv2Patched-${filename}/g" "${filename}.xml"
                        grep -v '<testsuites>\\|</testsuites>' "${filename}.xml" >> "${output_file}"
                    fi
                done
            '''
            if (!params.SKIP_UNPATCHED) {
                copyArtifacts(projectName: "${env.SLAVE_PIPELINE_NAME}/${env.BRANCH_NAME}", selector: specific("${unpatchedRun.number}"), target: "unpatched_run");
                sh '''
                    #!/bin/bash
                    set -xe
                    output_file="${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/aggregate-junit.xml"
                    cd "${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/unpatched_run/Report/"
                    for filename in AZURE_BOOT_TEST AZURE_BOOT_STRESS_TEST AZURE_BVT_TESTS HYPERV_BVT_TESTS; do
                        if [ -f "${filename}.xml" ]; then
                            sed -i "s/LISAv2Test/LISAv2Unpatched-${filename}/g" "${filename}.xml"
                            grep -v '<testsuites>\\|</testsuites>' "${filename}.xml" >> "${output_file}"
                        fi
                    done
                '''
            }
            sh '''
                #!/bin/bash
                set -xe
                output_file="${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/aggregate-junit.xml"
                echo "</testsuites>" >> "${output_file}"
            '''
            try {
                junit "aggregate-junit.xml"
            } catch (Exception e) {
                echo e.toString()
                echo "Failed to find any junit test results"
            }
            archiveArtifacts 'aggregate-junit.xml'

            sh 'python3 "${WORKSPACE}/scripts/comparison/html_parser.py" --patched_perf_dir "${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/patched_run/Report" --unpatched_perf_dir "${WORKSPACE}/aggregate_results${BUILD_NUMBER}${BRANCH_NAME}/unpatched_run/Report/" --junit_test_results ./aggregate-junit.xml --output ./results.html'
            archiveArtifacts 'results.html'

            if (env.SEND_EMAIL) {
                mailBody = "Hello,</br></br>\n</br>\n"
                mailBody = "<h3> Developer Patch Validation Pipeline #${env.BUILD_NUMBER} has completed. <a href='${env.BUILD_URL}'> >Job url<</a></h3>"
                if (env.KERNEL_PATCH && env.KERNEL_PATCH != '') {
                    mailBody += "The following patches were applied:</br>\n"
                    patches = env.KERNEL_PATCH.split(" ")
                    patches.each(){
                        mailBody += it + "</br>\n"
                    }
                }
                mailBody += readFile("results.html")
                emailext (
                    subject: "Developer patch validation report for run: #${env.BUILD_NUMBER}.",
                    recipientProviders: [[$class: 'RequesterRecipientProvider']],
                    mimeType : "text/html",
                    body: mailBody
                )
                deleteDir()
            }
        }
    }
}
